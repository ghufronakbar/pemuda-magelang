generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  profilePicture String?

  //address info
  subdistrict String?
  village     String?
  street      String? @db.Text()

  role Role @default(user)

  talent           Talent?
  articles         Article[]
  articleUserLikes ArticleUserLike[]
  comments         Comment[]

  community Community?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Role {
  superadmin
  admin
  user
}

model Talent {
  id   String @id @default(uuid())
  slug String @unique

  name String

  profilePicture String?
  bannerPicture  String?

  profession String
  industry   String

  workExperiences WorkExperience[]
  educations      Education[]
  awards          Award[]
  skills          String[]

  description String? @db.Text()

  status TalentStatusEnum @default(approved)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  products     Product[]
  socialMedias SocialMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model WorkExperience {
  id String @id @default(uuid())

  talentId String
  talent   Talent @relation(fields: [talentId], references: [id])

  companyName String
  position    String
  description String? @db.Text()

  startDate DateTime
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Education {
  id String @id @default(uuid())

  talentId String
  talent   Talent @relation(fields: [talentId], references: [id])

  degree      String
  schoolName  String
  description String? @db.Text()

  startDate DateTime
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Award {
  id String @id @default(uuid())

  talentId String
  talent   Talent @relation(fields: [talentId], references: [id])

  image       String?
  name        String
  description String?  @db.Text()
  date        DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum TalentStatusEnum {
  pending
  approved
  rejected
  banned
}

model SocialMedia {
  id       String                  @id @default(uuid())
  platform SocialMediaPlatformEnum
  url      String

  talentId String
  talent   Talent @relation(fields: [talentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum SocialMediaPlatformEnum {
  instagram
  twitter
  facebook
  youtube
  linkedin
  tiktok
  website
  email
  phone
  address
  whatsapp
  other
}

model Article {
  id   String @id @default(uuid())
  slug String @unique

  title          String
  thumbnailImage String
  content        String @db.Text() // HTML string

  category String
  tags     String[]

  trackViews TrackView[]
  status     ArticleStatusEnum @default(draft)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  type ArticleTypeEnum

  articleUserLikes ArticleUserLike[]
  comments         Comment[]

  communityId String?
  community   Community? @relation(fields: [communityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model TrackView {
  id Int @id @default(autoincrement())

  ip        String
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
}

enum ArticleTypeEnum {
  detak // user
  gerak // admin
  dampak // komunitas
}

// to track user who like the article
model ArticleUserLike {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  articleId String
  article   Article @relation(fields: [articleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// comment

model Comment {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  articleId String
  article   Article @relation(fields: [articleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  content String @db.Text()
}

enum ArticleStatusEnum {
  draft
  published
  banned
}

model Product {
  id   String @id @default(uuid())
  slug String @unique

  title       String
  images      String[]
  description String   @db.Text()
  price       Float? // jika null maka tidak usah tampilkan di halaman product
  tags        String[]
  category    String

  talentId String
  talent   Talent @relation(fields: [talentId], references: [id])

  status ProductStatusEnum

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ProductStatusEnum {
  draft
  published
  banned
}

model HubCategory {
  id   String @id @default(uuid())
  name String
  hubs Hub[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Hub {
  id   String @id @default(uuid())
  slug String @unique

  name        String
  description String
  image       String?
  ctaLink     String?
  status      HubStatusEnum @default(active)

  hubCategoryId String
  hubCategory   HubCategory @relation(fields: [hubCategoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum HubStatusEnum {
  active
  inactive
  soon
}

// expected only one row
model AppData {
  id String @id @default(uuid())

  heroTitle       String
  heroDescription String
  heroImage       String?

  aboutTitle       String
  aboutDescription String
  aboutImage       String?
  aboutItems       AboutItem[]

  brandingTitle       String
  brandingDescription String
  brandingVideo       String?

  partners Partner[]

  pageTerms   String
  pagePrivacy String
  pageFaq     String

  appSocialMedias AppSocialMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AboutItem {
  id    String   @id @default(uuid())
  key   String
  value String
  icon  IconEnum

  appDataId String
  appData   AppData @relation(fields: [appDataId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum IconEnum {
  heart
  brain
  globe
  rocket
  star
  hand
  smile
  thumbsUp
  thumbsDown
  people
  handshake
  mapPin
  sparkles
  bookOpen
  users
  messageSquare
  layers
  grid
}

model Partner {
  id    String @id @default(uuid())
  name  String
  image String
  href  String

  type PartnerTypeEnum

  appDataId String
  appData   AppData @relation(fields: [appDataId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PartnerTypeEnum {
  supported
  collaborator
  media
}

model AppSocialMedia {
  id       String                  @id @default(uuid())
  platform SocialMediaPlatformEnum
  url      String

  appDataId String
  appData   AppData @relation(fields: [appDataId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Community {
  id   String @id @default(uuid())
  slug String @unique

  name           String
  description    String? @db.Text()
  profilePicture String?
  bannerPicture  String?

  ctaText  String
  ctaLink  String
  category String
  status   CommunityStatusEnum @default(pending)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  articles Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum CommunityStatusEnum {
  pending
  approved
  rejected
  banned
}
